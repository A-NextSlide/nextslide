// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || 'https://auth.nextslide.ai';
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  throw new Error('Missing Supabase environment variables. Please check your .env file.');
}



// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create Supabase client with native auth enabled
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true,
      flowType: 'pkce'
    }
  }
);

// Initialize the storage bucket for media files
export const initializeStorage = async (): Promise<void> => {
  try {
    // Check if we have a session before trying to access storage
    const { data: { session } } = await supabase.auth.getSession();
    
    // If no session, skip storage initialization (will be done after login)
    if (!session) {
      console.log('[Storage] No session found, skipping storage initialization');
      return;
    }
    
    // Try to list files in the bucket (this will fail if bucket doesn't exist or we don't have access)
    const { error: listError } = await supabase.storage
      .from('slide-media')
      .list('', { limit: 1 });
    
    if (listError) {
      // If the error indicates the bucket doesn't exist, try to create it
      if (listError.message?.includes('bucket') && listError.message?.includes('not found')) {
        console.log('Storage bucket "slide-media" not found, attempting to create...');
        
        const { error: createError } = await supabase.storage.createBucket('slide-media', {
          public: true,
        });
        
        if (createError) {
          // Only log an error if it's not a permissions issue or already exists
          if (!createError.message?.includes('row-level security policy') && 
              !createError.message?.includes('already exists') &&
              !createError.message?.includes('authorization')) {
            console.error('Error creating storage bucket:', createError);
          }
        } else {
          console.log('Storage bucket "slide-media" created successfully');
        }
      } else if (!listError.message?.includes('row-level security policy') && 
                 !listError.message?.includes('authorization')) {
        // Only log non-RLS and non-auth errors
        console.error('Error accessing storage bucket:', listError);
      }
    }
    // If no error, bucket exists and is accessible
  } catch (err) {
    // Only log unexpected errors
    if (err instanceof Error && 
        !err.message?.includes('row-level security policy') &&
        !err.message?.includes('authorization')) {
      console.error('Error initializing storage:', err);
    }
  }
};