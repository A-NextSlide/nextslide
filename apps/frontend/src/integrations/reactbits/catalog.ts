/**
 * ReactBits Component Catalog
 *
 * Curated catalog of high-quality ReactBits components with metadata
 */

import { ReactBitsDefinition, ReactBitsCategory, PropDefinition } from './types';

/**
 * Priority components catalog with complete metadata
 * These are pre-configured and ready to use
 */
export const REACTBITS_CATALOG: Record<string, Omit<ReactBitsDefinition, 'component' | 'sourceCode'>> = {
  // ========== TEXT ANIMATIONS ==========
  'blur-text': {
    id: 'blur-text',
    name: 'BlurText',
    displayName: 'Blur Text',
    category: 'text-animations',
    variant: 'TS-TW',
    description: 'Text starts blurred then crisply resolves for a soft-focus reveal effect',
    dependencies: ['framer-motion'],
    quality: 9,
    tags: ['text', 'animation', 'reveal', 'blur'],
    propsSchema: {
      text: {
        type: 'string',
        label: 'Text',
        description: 'The text content to animate',
        default: 'Hello World',
        required: true,
        control: 'textarea',
      },
      delay: {
        type: 'number',
        label: 'Delay',
        description: 'Animation delay between segments (seconds)',
        default: 0.05,
        min: 0,
        max: 1,
        step: 0.01,
        control: 'slider',
      },
      animateBy: {
        type: 'enum',
        label: 'Animate By',
        description: 'Animation segmentation mode',
        default: 'words',
        options: ['words', 'characters'],
        control: 'dropdown',
      },
      direction: {
        type: 'enum',
        label: 'Direction',
        description: 'Animation direction',
        default: 'top',
        options: ['top', 'bottom'],
        control: 'dropdown',
      },
      className: {
        type: 'string',
        label: 'CSS Classes',
        description: 'Additional CSS classes',
        default: 'text-4xl font-bold',
        control: 'input',
      },
    },
    defaultProps: {
      text: 'Animated Text',
      delay: 0.05,
      animateBy: 'words',
      direction: 'top',
      className: 'text-4xl font-bold text-foreground',
    },
  },

  'count-up': {
    id: 'count-up',
    name: 'CountUp',
    displayName: 'Count Up',
    category: 'text-animations',
    variant: 'TS-TW',
    description: 'Animated number counter with customizable formatting',
    dependencies: [],
    quality: 10,
    tags: ['number', 'counter', 'statistics', 'animation'],
    propsSchema: {
      to: {
        type: 'number',
        label: 'Target Number',
        description: 'The number to count to',
        default: 100,
        required: true,
        control: 'input',
      },
      from: {
        type: 'number',
        label: 'Start Number',
        description: 'The starting number',
        default: 0,
        control: 'input',
      },
      duration: {
        type: 'number',
        label: 'Duration',
        description: 'Animation duration in seconds',
        default: 2,
        min: 0.1,
        max: 10,
        step: 0.1,
        control: 'slider',
      },
      separator: {
        type: 'string',
        label: 'Separator',
        description: 'Number separator character (e.g., comma)',
        default: ',',
        control: 'input',
      },
      direction: {
        type: 'enum',
        label: 'Direction',
        description: 'Count direction',
        default: 'up',
        options: ['up', 'down'],
        control: 'dropdown',
      },
      className: {
        type: 'string',
        label: 'CSS Classes',
        description: 'Additional CSS classes',
        default: 'text-5xl font-bold',
        control: 'input',
      },
    },
    defaultProps: {
      to: 1000,
      from: 0,
      duration: 2,
      separator: ',',
      direction: 'up',
      className: 'text-5xl font-bold text-primary',
    },
  },

  'glitch-text': {
    id: 'glitch-text',
    name: 'GlitchText',
    displayName: 'Glitch Text',
    category: 'text-animations',
    variant: 'TS-TW',
    description: 'Cyberpunk-style glitch effects for text',
    dependencies: [],
    quality: 9,
    tags: ['glitch', 'cyberpunk', 'effect', 'attention'],
    propsSchema: {
      children: {
        type: 'string',
        label: 'Text',
        description: 'Text to display with glitch effect',
        default: 'Glitch Effect',
        required: true,
        control: 'textarea',
      },
      speed: {
        type: 'number',
        label: 'Speed',
        description: 'Animation speed multiplier',
        default: 0.5,
        min: 0.1,
        max: 2,
        step: 0.1,
        control: 'slider',
      },
      enableShadows: {
        type: 'boolean',
        label: 'RGB Shadows',
        description: 'Toggle RGB split shadow effects',
        default: true,
        control: 'checkbox',
      },
      enableOnHover: {
        type: 'boolean',
        label: 'Hover Only',
        description: 'Glitch only on hover',
        default: false,
        control: 'checkbox',
      },
      className: {
        type: 'string',
        label: 'CSS Classes',
        description: 'Additional CSS classes',
        default: 'text-3xl font-bold',
        control: 'input',
      },
    },
    defaultProps: {
      children: 'Glitch Effect',
      speed: 0.5,
      enableShadows: true,
      enableOnHover: false,
      className: 'text-3xl font-bold',
    },
  },

  'gradient-text': {
    id: 'gradient-text',
    name: 'GradientText',
    displayName: 'Gradient Text',
    category: 'text-animations',
    variant: 'TS-TW',
    description: 'Text with animated gradient effects',
    dependencies: [],
    quality: 9,
    tags: ['gradient', 'color', 'animation', 'style'],
    propsSchema: {
      children: {
        type: 'string',
        label: 'Text',
        description: 'Text content',
        default: 'Gradient Text',
        required: true,
        control: 'textarea',
      },
      colors: {
        type: 'array',
        label: 'Gradient Colors',
        description: 'Array of gradient colors',
        default: ['#ff0080', '#ff8c00', '#40e0d0'],
        control: 'input',
      },
      animationSpeed: {
        type: 'number',
        label: 'Animation Speed',
        description: 'Speed of gradient animation',
        default: 3,
        min: 1,
        max: 10,
        step: 0.5,
        control: 'slider',
      },
      className: {
        type: 'string',
        label: 'CSS Classes',
        description: 'Additional CSS classes',
        default: 'text-6xl font-bold',
        control: 'input',
      },
    },
    defaultProps: {
      children: 'Gradient Text',
      colors: ['#ff0080', '#ff8c00', '#40e0d0'],
      animationSpeed: 3,
      className: 'text-6xl font-bold',
    },
  },

  // ========== BACKGROUNDS ==========
  'aurora': {
    id: 'aurora',
    name: 'Aurora',
    displayName: 'Aurora',
    category: 'backgrounds',
    variant: 'TS-TW',
    description: 'Northern lights inspired gradient animation background',
    dependencies: [],
    quality: 10,
    tags: ['background', 'gradient', 'animated', 'elegant'],
    propsSchema: {
      colorStops: {
        type: 'array',
        label: 'Color Stops',
        description: 'Gradient color stops',
        default: ['#5227FF', '#7cff67', '#5227FF'],
        control: 'input',
      },
      amplitude: {
        type: 'number',
        label: 'Wave Amplitude',
        description: 'Vertical wave amplitude',
        default: 1.0,
        min: 0,
        max: 3,
        step: 0.1,
        control: 'slider',
      },
      speed: {
        type: 'number',
        label: 'Animation Speed',
        description: 'Speed multiplier for animation',
        default: 1.0,
        min: 0.1,
        max: 5,
        step: 0.1,
        control: 'slider',
      },
      blend: {
        type: 'number',
        label: 'Blend/Softness',
        description: 'Blending factor for smoothness',
        default: 0.5,
        min: 0,
        max: 1,
        step: 0.05,
        control: 'slider',
      },
      className: {
        type: 'string',
        label: 'CSS Classes',
        description: 'Additional CSS classes',
        default: '',
        control: 'input',
      },
    },
    defaultProps: {
      colorStops: ['#5227FF', '#7cff67', '#5227FF'],
      amplitude: 1.0,
      speed: 1.0,
      blend: 0.5,
      className: 'w-full h-full',
    },
  },

  'particles': {
    id: 'particles',
    name: 'Particles',
    displayName: 'Particles',
    category: 'backgrounds',
    variant: 'TS-TW',
    description: 'Particle system background with Three.js',
    dependencies: ['three'],
    quality: 10,
    tags: ['background', '3d', 'particles', 'interactive'],
    propsSchema: {
      particleCount: {
        type: 'number',
        label: 'Particle Count',
        description: 'Total number of particles',
        default: 200,
        min: 50,
        max: 1000,
        step: 50,
        control: 'slider',
      },
      particleColors: {
        type: 'array',
        label: 'Particle Colors',
        description: 'Array of colors for particles',
        default: ['#ffffff', '#ffffff', '#ffffff'],
        control: 'input',
      },
      speed: {
        type: 'number',
        label: 'Movement Speed',
        description: 'Speed of particle movement',
        default: 0.1,
        min: 0,
        max: 1,
        step: 0.05,
        control: 'slider',
      },
      particleSpread: {
        type: 'number',
        label: 'Spread',
        description: 'Spatial distribution of particles',
        default: 10,
        min: 5,
        max: 50,
        step: 1,
        control: 'slider',
      },
      particleBaseSize: {
        type: 'number',
        label: 'Base Size',
        description: 'Base size of particles',
        default: 100,
        min: 10,
        max: 500,
        step: 10,
        control: 'slider',
      },
      moveParticlesOnHover: {
        type: 'boolean',
        label: 'Move on Hover',
        description: 'Enable hover movement',
        default: false,
        control: 'checkbox',
      },
      disableRotation: {
        type: 'boolean',
        label: 'Disable Rotation',
        description: 'Stop particle rotation',
        default: false,
        control: 'checkbox',
      },
      className: {
        type: 'string',
        label: 'CSS Classes',
        description: 'Additional CSS classes',
        default: '',
        control: 'input',
      },
    },
    defaultProps: {
      particleCount: 200,
      particleColors: ['#ffffff', '#ffffff', '#ffffff'],
      speed: 0.1,
      particleSpread: 10,
      particleBaseSize: 100,
      moveParticlesOnHover: false,
      disableRotation: false,
      className: 'w-full h-full',
    },
  },

  'waves': {
    id: 'waves',
    name: 'Waves',
    displayName: 'Waves',
    category: 'backgrounds',
    variant: 'TS-TW',
    description: 'Smooth wave animation background',
    dependencies: [],
    quality: 9,
    tags: ['background', 'waves', 'smooth', 'flow'],
    propsSchema: {
      waveColor: {
        type: 'color',
        label: 'Wave Color',
        description: 'Color of the waves',
        default: '#3b82f6',
        control: 'colorpicker',
      },
      waveOpacity: {
        type: 'number',
        label: 'Opacity',
        description: 'Opacity of waves',
        default: 0.5,
        min: 0,
        max: 1,
        step: 0.05,
        control: 'slider',
      },
      speed: {
        type: 'number',
        label: 'Animation Speed',
        description: 'Speed of wave animation',
        default: 1,
        min: 0.1,
        max: 5,
        step: 0.1,
        control: 'slider',
      },
      amplitude: {
        type: 'number',
        label: 'Wave Height',
        description: 'Amplitude of waves',
        default: 50,
        min: 10,
        max: 200,
        step: 10,
        control: 'slider',
      },
      className: {
        type: 'string',
        label: 'CSS Classes',
        description: 'Additional CSS classes',
        default: '',
        control: 'input',
      },
    },
    defaultProps: {
      waveColor: '#3b82f6',
      waveOpacity: 0.5,
      speed: 1,
      amplitude: 50,
      className: 'w-full h-full',
    },
  },

  // ========== MORE TEXT ANIMATIONS ==========
  'scrambled-text': {
    id: 'scrambled-text',
    name: 'ScrambledText',
    displayName: 'Scrambled Text',
    category: 'text-animations',
    variant: 'TS-TW',
    description: 'Text that scrambles and reveals character by character',
    dependencies: [],
    quality: 9,
    tags: ['text', 'scramble', 'decrypt', 'animation'],
    propsSchema: {
      text: {
        type: 'string',
        label: 'Text',
        description: 'Text to scramble and reveal',
        default: 'Decrypting...',
        required: true,
        control: 'textarea',
      },
      speed: {
        type: 'number',
        label: 'Speed',
        description: 'Animation speed (ms per character)',
        default: 50,
        min: 10,
        max: 200,
        step: 10,
        control: 'slider',
      },
      characters: {
        type: 'string',
        label: 'Scramble Characters',
        description: 'Characters to use for scrambling',
        default: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*',
        control: 'input',
      },
      className: {
        type: 'string',
        label: 'CSS Classes',
        description: 'Additional CSS classes',
        default: 'text-2xl font-mono',
        control: 'input',
      },
    },
    defaultProps: {
      text: 'Decrypting Message...',
      speed: 50,
      characters: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*',
      className: 'text-2xl font-mono text-primary',
    },
  },

  'typewriter-text': {
    id: 'typewriter-text',
    name: 'TypewriterText',
    displayName: 'Typewriter Text',
    category: 'text-animations',
    variant: 'TS-TW',
    description: 'Classic typewriter effect with blinking cursor',
    dependencies: [],
    quality: 10,
    tags: ['text', 'typewriter', 'typing', 'cursor'],
    propsSchema: {
      text: {
        type: 'string',
        label: 'Text',
        description: 'Text to type out',
        default: 'Hello, World!',
        required: true,
        control: 'textarea',
      },
      speed: {
        type: 'number',
        label: 'Typing Speed',
        description: 'Characters per second',
        default: 10,
        min: 1,
        max: 50,
        step: 1,
        control: 'slider',
      },
      showCursor: {
        type: 'boolean',
        label: 'Show Cursor',
        description: 'Display blinking cursor',
        default: true,
        control: 'checkbox',
      },
      cursorColor: {
        type: 'color',
        label: 'Cursor Color',
        description: 'Color of the blinking cursor',
        default: '#000000',
        control: 'colorpicker',
      },
      className: {
        type: 'string',
        label: 'CSS Classes',
        description: 'Additional CSS classes',
        default: 'text-3xl font-mono',
        control: 'input',
      },
    },
    defaultProps: {
      text: 'Welcome to NextSlide!',
      speed: 10,
      showCursor: true,
      cursorColor: '#000000',
      className: 'text-3xl font-mono',
    },
  },

  'neon-text': {
    id: 'neon-text',
    name: 'NeonText',
    displayName: 'Neon Text',
    category: 'text-animations',
    variant: 'TS-TW',
    description: 'Text with neon glow effect',
    dependencies: [],
    quality: 9,
    tags: ['text', 'neon', 'glow', 'retro'],
    propsSchema: {
      text: {
        type: 'string',
        label: 'Text',
        description: 'Neon text content',
        default: 'NEON',
        required: true,
        control: 'input',
      },
      glowColor: {
        type: 'color',
        label: 'Glow Color',
        description: 'Color of the neon glow',
        default: '#00ff00',
        control: 'colorpicker',
      },
      intensity: {
        type: 'number',
        label: 'Glow Intensity',
        description: 'Intensity of the glow effect',
        default: 20,
        min: 5,
        max: 50,
        step: 1,
        control: 'slider',
      },
      flicker: {
        type: 'boolean',
        label: 'Flicker Effect',
        description: 'Add realistic neon flicker',
        default: false,
        control: 'checkbox',
      },
      className: {
        type: 'string',
        label: 'CSS Classes',
        description: 'Additional CSS classes',
        default: 'text-6xl font-bold',
        control: 'input',
      },
    },
    defaultProps: {
      text: 'NEON',
      glowColor: '#00ff00',
      intensity: 20,
      flicker: false,
      className: 'text-6xl font-bold uppercase',
    },
  },

  // ========== MORE BACKGROUNDS ==========
  'dots-pattern': {
    id: 'dots-pattern',
    name: 'DotsPattern',
    displayName: 'Dots Pattern',
    category: 'backgrounds',
    variant: 'TS-TW',
    description: 'Animated dots pattern background',
    dependencies: [],
    quality: 9,
    tags: ['background', 'dots', 'pattern', 'grid'],
    propsSchema: {
      dotColor: {
        type: 'color',
        label: 'Dot Color',
        description: 'Color of the dots',
        default: '#888888',
        control: 'colorpicker',
      },
      dotSize: {
        type: 'number',
        label: 'Dot Size',
        description: 'Size of individual dots (px)',
        default: 2,
        min: 1,
        max: 10,
        step: 1,
        control: 'slider',
      },
      spacing: {
        type: 'number',
        label: 'Spacing',
        description: 'Space between dots (px)',
        default: 20,
        min: 10,
        max: 100,
        step: 5,
        control: 'slider',
      },
      animate: {
        type: 'boolean',
        label: 'Animate',
        description: 'Enable pulse animation',
        default: false,
        control: 'checkbox',
      },
    },
    defaultProps: {
      dotColor: '#888888',
      dotSize: 2,
      spacing: 20,
      animate: false,
    },
  },

  'gradient-mesh': {
    id: 'gradient-mesh',
    name: 'GradientMesh',
    displayName: 'Gradient Mesh',
    category: 'backgrounds',
    variant: 'TS-TW',
    description: 'Animated mesh gradient background',
    dependencies: [],
    quality: 10,
    tags: ['background', 'gradient', 'mesh', 'modern'],
    propsSchema: {
      color1: {
        type: 'color',
        label: 'Color 1',
        description: 'First gradient color',
        default: '#6366f1',
        control: 'colorpicker',
      },
      color2: {
        type: 'color',
        label: 'Color 2',
        description: 'Second gradient color',
        default: '#a855f7',
        control: 'colorpicker',
      },
      color3: {
        type: 'color',
        label: 'Color 3',
        description: 'Third gradient color',
        default: '#ec4899',
        control: 'colorpicker',
      },
      speed: {
        type: 'number',
        label: 'Animation Speed',
        description: 'Speed of gradient movement',
        default: 1,
        min: 0.1,
        max: 5,
        step: 0.1,
        control: 'slider',
      },
      blur: {
        type: 'number',
        label: 'Blur Amount',
        description: 'Blur intensity for smooth effect',
        default: 60,
        min: 0,
        max: 150,
        step: 10,
        control: 'slider',
      },
    },
    defaultProps: {
      color1: '#6366f1',
      color2: '#a855f7',
      color3: '#ec4899',
      speed: 1,
      blur: 60,
    },
  },

  'starfield': {
    id: 'starfield',
    name: 'Starfield',
    displayName: 'Starfield',
    category: 'backgrounds',
    variant: 'TS-TW',
    description: 'Animated starfield background',
    dependencies: [],
    quality: 10,
    tags: ['background', 'stars', 'space', 'night'],
    propsSchema: {
      starCount: {
        type: 'number',
        label: 'Star Count',
        description: 'Number of stars',
        default: 100,
        min: 50,
        max: 500,
        step: 50,
        control: 'slider',
      },
      starColor: {
        type: 'color',
        label: 'Star Color',
        description: 'Color of the stars',
        default: '#ffffff',
        control: 'colorpicker',
      },
      speed: {
        type: 'number',
        label: 'Speed',
        description: 'Movement speed',
        default: 0.5,
        min: 0.1,
        max: 3,
        step: 0.1,
        control: 'slider',
      },
      twinkle: {
        type: 'boolean',
        label: 'Twinkle',
        description: 'Enable twinkling effect',
        default: true,
        control: 'checkbox',
      },
    },
    defaultProps: {
      starCount: 100,
      starColor: '#ffffff',
      speed: 0.5,
      twinkle: true,
    },
  },

  // ========== MORE TEXT ANIMATIONS ==========
  'shiny-text': {
    id: 'shiny-text',
    name: 'ShinyText',
    displayName: 'Shiny Text',
    category: 'text-animations',
    variant: 'TS-TW',
    description: 'Text with animated shimmering highlight effect',
    dependencies: [],
    quality: 9,
    tags: ['text', 'shimmer', 'shine', 'highlight'],
    propsSchema: {
      text: {
        type: 'string',
        label: 'Text',
        description: 'The text content',
        default: 'Shiny Text',
        required: true,
        control: 'textarea',
      },
      shimmerColor: {
        type: 'color',
        label: 'Shimmer Color',
        description: 'Color of the shimmer effect',
        default: '#ffffff',
        control: 'colorpicker',
      },
      speed: {
        type: 'number',
        label: 'Speed',
        description: 'Animation speed',
        default: 2,
        min: 0.5,
        max: 10,
        step: 0.5,
        control: 'slider',
      },
      className: {
        type: 'string',
        label: 'CSS Classes',
        description: 'Additional CSS classes',
        default: 'text-4xl font-bold',
        control: 'input',
      },
    },
    defaultProps: {
      text: 'Shiny Text',
      shimmerColor: '#ffffff',
      speed: 2,
      className: 'text-4xl font-bold text-foreground',
    },
  },

  'rotating-text': {
    id: 'rotating-text',
    name: 'RotatingText',
    displayName: 'Rotating Text',
    category: 'text-animations',
    variant: 'TS-TW',
    description: 'Text that rotates through different phrases',
    dependencies: ['framer-motion'],
    quality: 10,
    tags: ['text', 'rotate', 'cycle', 'animation'],
    propsSchema: {
      words: {
        type: 'string',
        label: 'Words (comma separated)',
        description: 'Words to rotate through',
        default: 'Amazing,Stunning,Beautiful,Incredible',
        required: true,
        control: 'textarea',
      },
      interval: {
        type: 'number',
        label: 'Interval (seconds)',
        description: 'Time between rotations',
        default: 2,
        min: 0.5,
        max: 10,
        step: 0.5,
        control: 'slider',
      },
      className: {
        type: 'string',
        label: 'CSS Classes',
        description: 'Additional CSS classes',
        default: 'text-4xl font-bold',
        control: 'input',
      },
    },
    defaultProps: {
      words: 'Amazing,Stunning,Beautiful,Incredible',
      interval: 2,
      className: 'text-4xl font-bold text-foreground',
    },
  },

  // ========== MORE BACKGROUNDS ==========
  'beams': {
    id: 'beams',
    name: 'Beams',
    displayName: 'Light Beams',
    category: 'backgrounds',
    variant: 'TS-TW',
    description: 'Animated light beam effects across the background',
    dependencies: [],
    quality: 10,
    tags: ['background', 'beams', 'light', 'gradient'],
    propsSchema: {
      beamColor: {
        type: 'color',
        label: 'Beam Color',
        description: 'Color of the light beams',
        default: '#6366f1',
        control: 'colorpicker',
      },
      beamCount: {
        type: 'number',
        label: 'Beam Count',
        description: 'Number of light beams',
        default: 5,
        min: 1,
        max: 10,
        step: 1,
        control: 'slider',
      },
      speed: {
        type: 'number',
        label: 'Speed',
        description: 'Animation speed',
        default: 1,
        min: 0.1,
        max: 5,
        step: 0.1,
        control: 'slider',
      },
      opacity: {
        type: 'number',
        label: 'Opacity',
        description: 'Beam opacity',
        default: 0.3,
        min: 0.1,
        max: 1,
        step: 0.1,
        control: 'slider',
      },
    },
    defaultProps: {
      beamColor: '#6366f1',
      beamCount: 5,
      speed: 1,
      opacity: 0.3,
    },
  },

  'ripple-grid': {
    id: 'ripple-grid',
    name: 'RippleGrid',
    displayName: 'Ripple Grid',
    category: 'backgrounds',
    variant: 'TS-TW',
    description: 'Grid with ripple wave effects',
    dependencies: [],
    quality: 9,
    tags: ['background', 'grid', 'ripple', 'wave'],
    propsSchema: {
      gridColor: {
        type: 'color',
        label: 'Grid Color',
        description: 'Color of the grid lines',
        default: '#333333',
        control: 'colorpicker',
      },
      rippleColor: {
        type: 'color',
        label: 'Ripple Color',
        description: 'Color of the ripple effect',
        default: '#6366f1',
        control: 'colorpicker',
      },
      cellSize: {
        type: 'number',
        label: 'Cell Size',
        description: 'Size of grid cells (px)',
        default: 40,
        min: 20,
        max: 100,
        step: 10,
        control: 'slider',
      },
      speed: {
        type: 'number',
        label: 'Speed',
        description: 'Ripple animation speed',
        default: 1,
        min: 0.1,
        max: 5,
        step: 0.1,
        control: 'slider',
      },
    },
    defaultProps: {
      gridColor: '#333333',
      rippleColor: '#6366f1',
      cellSize: 40,
      speed: 1,
    },
  },

  // ========== MORE INTERACTIVE COMPONENTS ==========
  'spotlight-card': {
    id: 'spotlight-card',
    name: 'SpotlightCard',
    displayName: 'Spotlight Card',
    category: 'components',
    variant: 'TS-TW',
    description: 'Card with animated spotlight effect on hover',
    dependencies: [],
    quality: 10,
    tags: ['card', 'spotlight', 'hover', 'interactive'],
    propsSchema: {
      title: {
        type: 'string',
        label: 'Title',
        description: 'Card title',
        default: 'Spotlight Card',
        control: 'input',
      },
      content: {
        type: 'string',
        label: 'Content',
        description: 'Card content',
        default: 'Hover over me to see the spotlight effect',
        control: 'textarea',
      },
      spotlightColor: {
        type: 'color',
        label: 'Spotlight Color',
        description: 'Color of the spotlight',
        default: '#6366f1',
        control: 'colorpicker',
      },
      width: {
        type: 'number',
        label: 'Width',
        description: 'Card width (px)',
        default: 300,
        min: 200,
        max: 600,
        step: 50,
        control: 'slider',
      },
    },
    defaultProps: {
      title: 'Spotlight Card',
      content: 'Hover over me to see the spotlight effect',
      spotlightColor: '#6366f1',
      width: 300,
    },
  },

  'dock': {
    id: 'dock',
    name: 'Dock',
    displayName: 'macOS Dock',
    category: 'components',
    variant: 'TS-TW',
    description: 'macOS-style dock with hover magnification',
    dependencies: ['framer-motion'],
    quality: 10,
    tags: ['dock', 'macos', 'navigation', 'interactive'],
    propsSchema: {
      iconCount: {
        type: 'number',
        label: 'Icon Count',
        description: 'Number of icons in the dock',
        default: 5,
        min: 3,
        max: 10,
        step: 1,
        control: 'slider',
      },
      iconSize: {
        type: 'number',
        label: 'Icon Size',
        description: 'Base icon size (px)',
        default: 48,
        min: 32,
        max: 96,
        step: 8,
        control: 'slider',
      },
      magnification: {
        type: 'number',
        label: 'Magnification',
        description: 'Hover magnification multiplier',
        default: 1.5,
        min: 1,
        max: 2.5,
        step: 0.1,
        control: 'slider',
      },
    },
    defaultProps: {
      iconCount: 5,
      iconSize: 48,
      magnification: 1.5,
    },
  },

  // ========== ADDITIONAL TEXT ANIMATIONS ==========
  'split-text': {
    id: 'split-text',
    name: 'SplitText',
    displayName: 'Split Text',
    category: 'text-animations',
    variant: 'TS-TW',
    description: 'Text that splits and animates character by character',
    dependencies: ['framer-motion'],
    quality: 9,
    tags: ['text', 'split', 'reveal', 'animation'],
    propsSchema: {
      text: {
        type: 'string',
        label: 'Text',
        description: 'Text to animate',
        default: 'Split Text',
        required: true,
        control: 'textarea',
      },
      delay: {
        type: 'number',
        label: 'Delay per Character',
        description: 'Delay between characters (seconds)',
        default: 0.05,
        min: 0.01,
        max: 0.5,
        step: 0.01,
        control: 'slider',
      },
      className: {
        type: 'string',
        label: 'CSS Classes',
        description: 'Additional CSS classes',
        default: 'text-4xl font-bold',
        control: 'input',
      },
    },
    defaultProps: {
      text: 'Split Text Animation',
      delay: 0.05,
      className: 'text-4xl font-bold text-foreground',
    },
  },

  'shuffle-text': {
    id: 'shuffle-text',
    name: 'ShuffleText',
    displayName: 'Shuffle Text',
    category: 'text-animations',
    variant: 'TS-TW',
    description: 'Letters shuffle and scramble into place with a dynamic reveal effect',
    dependencies: [],
    quality: 9,
    tags: ['text', 'shuffle', 'scramble', 'animation'],
    propsSchema: {
      text: {
        type: 'string',
        label: 'Text',
        description: 'Text to shuffle and reveal',
        default: 'Shuffle Text',
        required: true,
        control: 'textarea',
      },
      speed: {
        type: 'number',
        label: 'Speed',
        description: 'Animation speed (ms per iteration)',
        default: 30,
        min: 10,
        max: 100,
        step: 5,
        control: 'slider',
      },
      iterations: {
        type: 'number',
        label: 'Shuffle Iterations',
        description: 'Number of shuffle iterations per character',
        default: 8,
        min: 3,
        max: 20,
        step: 1,
        control: 'slider',
      },
      className: {
        type: 'string',
        label: 'CSS Classes',
        description: 'Additional CSS classes',
        default: 'text-4xl font-bold',
        control: 'input',
      },
    },
    defaultProps: {
      text: 'Shuffle Animation',
      speed: 30,
      iterations: 8,
      className: 'text-4xl font-bold text-foreground',
    },
  },

  'decrypted-text': {
    id: 'decrypted-text',
    name: 'DecryptedText',
    displayName: 'Decrypted Text',
    category: 'text-animations',
    variant: 'TS-TW',
    description: 'Text decrypts character by character with matrix-style effect',
    dependencies: [],
    quality: 10,
    tags: ['text', 'decrypt', 'matrix', 'hacker', 'animation'],
    propsSchema: {
      text: {
        type: 'string',
        label: 'Text',
        description: 'Text to decrypt',
        default: 'Access Granted',
        required: true,
        control: 'textarea',
      },
      speed: {
        type: 'number',
        label: 'Speed',
        description: 'Decryption speed (ms per character)',
        default: 50,
        min: 20,
        max: 200,
        step: 10,
        control: 'slider',
      },
      glitchIntensity: {
        type: 'number',
        label: 'Glitch Intensity',
        description: 'Intensity of glitch effect',
        default: 0.5,
        min: 0,
        max: 1,
        step: 0.1,
        control: 'slider',
      },
      className: {
        type: 'string',
        label: 'CSS Classes',
        description: 'Additional CSS classes',
        default: 'text-3xl font-mono',
        control: 'input',
      },
    },
    defaultProps: {
      text: 'Access Granted',
      speed: 50,
      glitchIntensity: 0.5,
      className: 'text-3xl font-mono text-green-500',
    },
  },

  'loop-text': {
    id: 'loop-text',
    name: 'LoopText',
    displayName: 'Loop Text',
    category: 'text-animations',
    variant: 'TS-TW',
    description: 'Continuous looping text animation with smooth transitions',
    dependencies: [],
    quality: 9,
    tags: ['text', 'loop', 'continuous', 'marquee', 'animation'],
    propsSchema: {
      text: {
        type: 'string',
        label: 'Text',
        description: 'Text to loop continuously',
        default: 'Looping Text • Looping Text • ',
        required: true,
        control: 'textarea',
      },
      speed: {
        type: 'number',
        label: 'Speed',
        description: 'Loop speed (seconds per cycle)',
        default: 10,
        min: 3,
        max: 30,
        step: 1,
        control: 'slider',
      },
      direction: {
        type: 'enum',
        label: 'Direction',
        description: 'Scroll direction',
        default: 'left',
        options: ['left', 'right'],
        control: 'dropdown',
      },
      className: {
        type: 'string',
        label: 'CSS Classes',
        description: 'Additional CSS classes',
        default: 'text-4xl font-bold',
        control: 'input',
      },
    },
    defaultProps: {
      text: 'Continuous Loop • Infinite Scroll • ',
      speed: 10,
      direction: 'left',
      className: 'text-4xl font-bold text-foreground',
    },
  },

  'wavy-text': {
    id: 'wavy-text',
    name: 'WavyText',
    displayName: 'Wavy Text',
    category: 'text-animations',
    variant: 'TS-TW',
    description: 'Text with smooth wave motion animation',
    dependencies: [],
    quality: 9,
    tags: ['text', 'wave', 'motion', 'flow', 'animation'],
    propsSchema: {
      text: {
        type: 'string',
        label: 'Text',
        description: 'Text to animate with wave',
        default: 'Wavy Text',
        required: true,
        control: 'textarea',
      },
      amplitude: {
        type: 'number',
        label: 'Wave Amplitude',
        description: 'Height of wave motion (px)',
        default: 20,
        min: 5,
        max: 50,
        step: 5,
        control: 'slider',
      },
      frequency: {
        type: 'number',
        label: 'Wave Frequency',
        description: 'Speed of wave motion',
        default: 1,
        min: 0.1,
        max: 3,
        step: 0.1,
        control: 'slider',
      },
      className: {
        type: 'string',
        label: 'CSS Classes',
        description: 'Additional CSS classes',
        default: 'text-5xl font-bold',
        control: 'input',
      },
    },
    defaultProps: {
      text: 'Wavy Motion',
      amplitude: 20,
      frequency: 1,
      className: 'text-5xl font-bold text-foreground',
    },
  },

  // ========== ADDITIONAL BACKGROUNDS ==========
  'grid-motion': {
    id: 'grid-motion',
    name: 'GridMotion',
    displayName: 'Grid Motion',
    category: 'backgrounds',
    variant: 'TS-TW',
    description: 'Animated grid with motion effects',
    dependencies: [],
    quality: 9,
    tags: ['background', 'grid', 'motion', 'tech'],
    propsSchema: {
      gridColor: {
        type: 'color',
        label: 'Grid Color',
        description: 'Color of grid lines',
        default: '#3b82f6',
        control: 'colorpicker',
      },
      cellSize: {
        type: 'number',
        label: 'Cell Size',
        description: 'Size of grid cells (px)',
        default: 50,
        min: 20,
        max: 100,
        step: 10,
        control: 'slider',
      },
      speed: {
        type: 'number',
        label: 'Animation Speed',
        description: 'Speed of motion',
        default: 1,
        min: 0.1,
        max: 5,
        step: 0.1,
        control: 'slider',
      },
      opacity: {
        type: 'number',
        label: 'Opacity',
        description: 'Grid opacity',
        default: 0.3,
        min: 0.1,
        max: 1,
        step: 0.1,
        control: 'slider',
      },
    },
    defaultProps: {
      gridColor: '#3b82f6',
      cellSize: 50,
      speed: 1,
      opacity: 0.3,
    },
  },

  'plasma': {
    id: 'plasma',
    name: 'Plasma',
    displayName: 'Plasma Effect',
    category: 'backgrounds',
    variant: 'TS-TW',
    description: 'Animated plasma effect background',
    dependencies: [],
    quality: 10,
    tags: ['background', 'plasma', 'colorful', 'dynamic'],
    propsSchema: {
      color1: {
        type: 'color',
        label: 'Color 1',
        description: 'First plasma color',
        default: '#ff0080',
        control: 'colorpicker',
      },
      color2: {
        type: 'color',
        label: 'Color 2',
        description: 'Second plasma color',
        default: '#7928ca',
        control: 'colorpicker',
      },
      color3: {
        type: 'color',
        label: 'Color 3',
        description: 'Third plasma color',
        default: '#0070f3',
        control: 'colorpicker',
      },
      speed: {
        type: 'number',
        label: 'Animation Speed',
        description: 'Speed of plasma movement',
        default: 1,
        min: 0.1,
        max: 5,
        step: 0.1,
        control: 'slider',
      },
    },
    defaultProps: {
      color1: '#ff0080',
      color2: '#7928ca',
      color3: '#0070f3',
      speed: 1,
    },
  },

  'chroma-grid': {
    id: 'chroma-grid',
    name: 'ChromaGrid',
    displayName: 'Chroma Grid',
    category: 'backgrounds',
    variant: 'TS-TW',
    description: 'Grid background with chromatic aberration effect',
    dependencies: [],
    quality: 10,
    tags: ['background', 'grid', 'chromatic', 'glitch', 'tech'],
    propsSchema: {
      gridColor: {
        type: 'color',
        label: 'Grid Color',
        description: 'Base color of grid lines',
        default: '#6366f1',
        control: 'colorpicker',
      },
      cellSize: {
        type: 'number',
        label: 'Cell Size',
        description: 'Size of grid cells (px)',
        default: 50,
        min: 20,
        max: 100,
        step: 10,
        control: 'slider',
      },
      aberrationIntensity: {
        type: 'number',
        label: 'Aberration Intensity',
        description: 'Strength of chromatic effect',
        default: 3,
        min: 0,
        max: 10,
        step: 1,
        control: 'slider',
      },
      speed: {
        type: 'number',
        label: 'Animation Speed',
        description: 'Speed of aberration',
        default: 1,
        min: 0.1,
        max: 5,
        step: 0.1,
        control: 'slider',
      },
    },
    defaultProps: {
      gridColor: '#6366f1',
      cellSize: 50,
      aberrationIntensity: 3,
      speed: 1,
    },
  },

  'cubes': {
    id: 'cubes',
    name: 'Cubes',
    displayName: '3D Cubes',
    category: 'backgrounds',
    variant: 'TS-TW',
    description: '3D rotating cubes background with depth',
    dependencies: [],
    quality: 10,
    tags: ['background', '3d', 'cubes', 'geometric', 'depth'],
    propsSchema: {
      cubeCount: {
        type: 'number',
        label: 'Cube Count',
        description: 'Number of cubes',
        default: 8,
        min: 3,
        max: 20,
        step: 1,
        control: 'slider',
      },
      cubeColor: {
        type: 'color',
        label: 'Cube Color',
        description: 'Base color of cubes',
        default: '#6366f1',
        control: 'colorpicker',
      },
      rotationSpeed: {
        type: 'number',
        label: 'Rotation Speed',
        description: 'Speed of cube rotation',
        default: 1,
        min: 0.1,
        max: 5,
        step: 0.1,
        control: 'slider',
      },
      perspective: {
        type: 'number',
        label: '3D Perspective',
        description: 'Depth perspective (px)',
        default: 1000,
        min: 500,
        max: 2000,
        step: 100,
        control: 'slider',
      },
    },
    defaultProps: {
      cubeCount: 8,
      cubeColor: '#6366f1',
      rotationSpeed: 1,
      perspective: 1000,
    },
  },

  'ballpit': {
    id: 'ballpit',
    name: 'Ballpit',
    displayName: 'Ball Pit',
    category: 'backgrounds',
    variant: 'TS-TW',
    description: 'Bouncing colorful balls with physics',
    dependencies: [],
    quality: 9,
    tags: ['background', 'balls', 'physics', 'playful', 'interactive'],
    propsSchema: {
      ballCount: {
        type: 'number',
        label: 'Ball Count',
        description: 'Number of balls',
        default: 20,
        min: 5,
        max: 50,
        step: 5,
        control: 'slider',
      },
      colors: {
        type: 'array',
        label: 'Ball Colors',
        description: 'Array of ball colors',
        default: ['#ff0080', '#7928ca', '#0070f3', '#00f260', '#ffb800'],
        control: 'input',
      },
      gravity: {
        type: 'number',
        label: 'Gravity',
        description: 'Gravity strength',
        default: 0.5,
        min: 0.1,
        max: 2,
        step: 0.1,
        control: 'slider',
      },
      bounce: {
        type: 'number',
        label: 'Bounce Factor',
        description: 'Bounciness of balls',
        default: 0.8,
        min: 0.1,
        max: 1,
        step: 0.1,
        control: 'slider',
      },
    },
    defaultProps: {
      ballCount: 20,
      colors: ['#ff0080', '#7928ca', '#0070f3', '#00f260', '#ffb800'],
      gravity: 0.5,
      bounce: 0.8,
    },
  },

  'retro-grid': {
    id: 'retro-grid',
    name: 'RetroGrid',
    displayName: 'Retro Grid',
    category: 'backgrounds',
    variant: 'TS-TW',
    description: 'Retro 80s grid with perspective and horizon',
    dependencies: [],
    quality: 10,
    tags: ['background', 'retro', '80s', 'grid', 'perspective', 'synthwave'],
    propsSchema: {
      gridColor: {
        type: 'color',
        label: 'Grid Color',
        description: 'Color of grid lines',
        default: '#ff00ff',
        control: 'colorpicker',
      },
      horizonColor: {
        type: 'color',
        label: 'Horizon Color',
        description: 'Color of horizon gradient',
        default: '#ff0080',
        control: 'colorpicker',
      },
      speed: {
        type: 'number',
        label: 'Scroll Speed',
        description: 'Speed of grid movement',
        default: 1,
        min: 0.1,
        max: 5,
        step: 0.1,
        control: 'slider',
      },
      fogDensity: {
        type: 'number',
        label: 'Fog Density',
        description: 'Density of distance fog',
        default: 0.5,
        min: 0,
        max: 1,
        step: 0.1,
        control: 'slider',
      },
    },
    defaultProps: {
      gridColor: '#ff00ff',
      horizonColor: '#ff0080',
      speed: 1,
      fogDensity: 0.5,
    },
  },

  // ========== ADDITIONAL INTERACTIVE COMPONENTS ==========
  'bounce-cards': {
    id: 'bounce-cards',
    name: 'BounceCards',
    displayName: 'Bounce Cards',
    category: 'components',
    variant: 'TS-TW',
    description: 'Cards with bounce animation on hover',
    dependencies: ['framer-motion'],
    quality: 9,
    tags: ['cards', 'bounce', 'interactive', 'grid'],
    propsSchema: {
      cardCount: {
        type: 'number',
        label: 'Card Count',
        description: 'Number of cards',
        default: 3,
        min: 1,
        max: 6,
        step: 1,
        control: 'slider',
      },
      cardWidth: {
        type: 'number',
        label: 'Card Width',
        description: 'Width of each card (px)',
        default: 250,
        min: 150,
        max: 400,
        step: 50,
        control: 'slider',
      },
      bounceStrength: {
        type: 'number',
        label: 'Bounce Strength',
        description: 'Strength of bounce effect',
        default: 1.1,
        min: 1,
        max: 1.3,
        step: 0.05,
        control: 'slider',
      },
    },
    defaultProps: {
      cardCount: 3,
      cardWidth: 250,
      bounceStrength: 1.1,
    },
  },

  'circular-gallery': {
    id: 'circular-gallery',
    name: 'CircularGallery',
    displayName: 'Circular Gallery',
    category: 'components',
    variant: 'TS-TW',
    description: 'Circular rotating image gallery',
    dependencies: ['framer-motion'],
    quality: 10,
    tags: ['gallery', 'circular', 'rotation', 'images'],
    propsSchema: {
      images: {
        type: 'array',
        label: 'Images',
        description: 'Array of image URLs',
        default: [],
        control: 'input',
      },
      radius: {
        type: 'number',
        label: 'Radius',
        description: 'Circle radius (px)',
        default: 200,
        min: 100,
        max: 400,
        step: 50,
        control: 'slider',
      },
      imageSize: {
        type: 'number',
        label: 'Image Size',
        description: 'Size of each image (px)',
        default: 100,
        min: 50,
        max: 200,
        step: 25,
        control: 'slider',
      },
      autoRotate: {
        type: 'boolean',
        label: 'Auto Rotate',
        description: 'Enable automatic rotation',
        default: true,
        control: 'checkbox',
      },
    },
    defaultProps: {
      images: [],
      radius: 200,
      imageSize: 100,
      autoRotate: true,
    },
  },

  'star-border': {
    id: 'star-border',
    name: 'StarBorder',
    displayName: 'Star Border',
    category: 'animations',
    variant: 'TS-TW',
    description: 'Animated star border effect',
    dependencies: [],
    quality: 9,
    tags: ['border', 'stars', 'glow', 'animated'],
    propsSchema: {
      color: {
        type: 'color',
        label: 'Star Color',
        description: 'Color of the stars',
        default: '#ffd700',
        control: 'colorpicker',
      },
      speed: {
        type: 'number',
        label: 'Animation Speed',
        description: 'Speed of star movement',
        default: 1,
        min: 0.1,
        max: 5,
        step: 0.1,
        control: 'slider',
      },
      starCount: {
        type: 'number',
        label: 'Star Count',
        description: 'Number of stars in border',
        default: 20,
        min: 10,
        max: 50,
        step: 5,
        control: 'slider',
      },
    },
    defaultProps: {
      color: '#ffd700',
      speed: 1,
      starCount: 20,
    },
  },

  'animated-list': {
    id: 'animated-list',
    name: 'AnimatedList',
    displayName: 'Animated List',
    category: 'components',
    variant: 'TS-TW',
    description: 'List items with staggered entrance animations',
    dependencies: ['framer-motion'],
    quality: 10,
    tags: ['list', 'animation', 'stagger', 'reveal'],
    propsSchema: {
      items: {
        type: 'array',
        label: 'List Items',
        description: 'Array of items to display',
        default: ['Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5'],
        control: 'input',
      },
      staggerDelay: {
        type: 'number',
        label: 'Stagger Delay',
        description: 'Delay between items (seconds)',
        default: 0.1,
        min: 0.05,
        max: 0.5,
        step: 0.05,
        control: 'slider',
      },
      animationType: {
        type: 'enum',
        label: 'Animation Type',
        description: 'Type of entrance animation',
        default: 'fade-up',
        options: ['fade-up', 'fade-left', 'fade-right', 'scale'],
        control: 'dropdown',
      },
      className: {
        type: 'string',
        label: 'CSS Classes',
        description: 'Additional CSS classes for items',
        default: 'text-lg',
        control: 'input',
      },
    },
    defaultProps: {
      items: ['Feature One', 'Feature Two', 'Feature Three', 'Feature Four', 'Feature Five'],
      staggerDelay: 0.1,
      animationType: 'fade-up',
      className: 'text-lg',
    },
  },

  'card-swap': {
    id: 'card-swap',
    name: 'CardSwap',
    displayName: 'Card Swap',
    category: 'components',
    variant: 'TS-TW',
    description: 'Swappable card interface with smooth transitions',
    dependencies: ['framer-motion'],
    quality: 10,
    tags: ['card', 'swap', 'interactive', 'transition'],
    propsSchema: {
      cards: {
        type: 'array',
        label: 'Card Titles',
        description: 'Array of card titles',
        default: ['Card 1', 'Card 2', 'Card 3'],
        control: 'input',
      },
      swapDirection: {
        type: 'enum',
        label: 'Swap Direction',
        description: 'Direction of card swap',
        default: 'horizontal',
        options: ['horizontal', 'vertical'],
        control: 'dropdown',
      },
      cardHeight: {
        type: 'number',
        label: 'Card Height',
        description: 'Height of cards (px)',
        default: 200,
        min: 150,
        max: 400,
        step: 50,
        control: 'slider',
      },
      autoSwap: {
        type: 'boolean',
        label: 'Auto Swap',
        description: 'Enable automatic swapping',
        default: false,
        control: 'checkbox',
      },
    },
    defaultProps: {
      cards: ['Featured Content', 'Latest Updates', 'Popular Items'],
      swapDirection: 'horizontal',
      cardHeight: 200,
      autoSwap: false,
    },
  },

  'morph-card': {
    id: 'morph-card',
    name: 'MorphCard',
    displayName: 'Morph Card',
    category: 'components',
    variant: 'TS-TW',
    description: 'Card with morphing shape transitions on hover',
    dependencies: ['framer-motion'],
    quality: 9,
    tags: ['card', 'morph', 'shape', 'transition', 'hover'],
    propsSchema: {
      title: {
        type: 'string',
        label: 'Title',
        description: 'Card title',
        default: 'Morph Card',
        control: 'input',
      },
      content: {
        type: 'string',
        label: 'Content',
        description: 'Card content',
        default: 'Hover to see the morphing effect',
        control: 'textarea',
      },
      morphShape: {
        type: 'enum',
        label: 'Morph Shape',
        description: 'Target shape on hover',
        default: 'circle',
        options: ['circle', 'hexagon', 'diamond'],
        control: 'dropdown',
      },
      cardColor: {
        type: 'color',
        label: 'Card Color',
        description: 'Background color',
        default: '#6366f1',
        control: 'colorpicker',
      },
    },
    defaultProps: {
      title: 'Morph Card',
      content: 'Hover to see the morphing effect',
      morphShape: 'circle',
      cardColor: '#6366f1',
    },
  },

  'flip-card': {
    id: 'flip-card',
    name: 'FlipCard',
    displayName: 'Flip Card',
    category: 'components',
    variant: 'TS-TW',
    description: '3D card flip animation revealing back content',
    dependencies: [],
    quality: 10,
    tags: ['card', 'flip', '3d', 'interactive', 'hover'],
    propsSchema: {
      frontTitle: {
        type: 'string',
        label: 'Front Title',
        description: 'Title on front side',
        default: 'Front',
        control: 'input',
      },
      frontContent: {
        type: 'string',
        label: 'Front Content',
        description: 'Content on front side',
        default: 'Hover to flip',
        control: 'textarea',
      },
      backTitle: {
        type: 'string',
        label: 'Back Title',
        description: 'Title on back side',
        default: 'Back',
        control: 'input',
      },
      backContent: {
        type: 'string',
        label: 'Back Content',
        description: 'Content on back side',
        default: 'Hidden content revealed!',
        control: 'textarea',
      },
      flipDirection: {
        type: 'enum',
        label: 'Flip Direction',
        description: 'Direction of flip',
        default: 'horizontal',
        options: ['horizontal', 'vertical'],
        control: 'dropdown',
      },
      cardWidth: {
        type: 'number',
        label: 'Card Width',
        description: 'Width of card (px)',
        default: 300,
        min: 200,
        max: 500,
        step: 50,
        control: 'slider',
      },
      cardHeight: {
        type: 'number',
        label: 'Card Height',
        description: 'Height of card (px)',
        default: 400,
        min: 250,
        max: 600,
        step: 50,
        control: 'slider',
      },
    },
    defaultProps: {
      frontTitle: 'Front Side',
      frontContent: 'Hover to flip the card',
      backTitle: 'Back Side',
      backContent: 'This is the hidden content!',
      flipDirection: 'horizontal',
      cardWidth: 300,
      cardHeight: 400,
    },
  },
};

/**
 * Get all components by category
 */
export function getComponentsByCategory(category: ReactBitsCategory): string[] {
  return Object.values(REACTBITS_CATALOG)
    .filter((comp) => comp.category === category)
    .map((comp) => comp.id);
}

/**
 * Get component definition by ID
 */
export function getComponentById(id: string): (typeof REACTBITS_CATALOG)[string] | undefined {
  return REACTBITS_CATALOG[id];
}

/**
 * Get all categories with component counts
 */
export function getCategorySummary(): Record<ReactBitsCategory, number> {
  const summary: Record<string, number> = {};
  Object.values(REACTBITS_CATALOG).forEach((comp) => {
    summary[comp.category] = (summary[comp.category] || 0) + 1;
  });
  return summary as Record<ReactBitsCategory, number>;
}

/**
 * Search components by name or tags
 */
export function searchComponents(query: string): string[] {
  const lowerQuery = query.toLowerCase();
  return Object.values(REACTBITS_CATALOG)
    .filter(
      (comp) =>
        comp.displayName.toLowerCase().includes(lowerQuery) ||
        comp.description.toLowerCase().includes(lowerQuery) ||
        comp.tags?.some((tag) => tag.toLowerCase().includes(lowerQuery))
    )
    .map((comp) => comp.id);
}
