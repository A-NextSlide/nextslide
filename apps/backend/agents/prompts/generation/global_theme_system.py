"""
Global Theme System - AI-driven design language for presentations.

This module provides prompts for AI to create comprehensive theming systems.
No hardcoded themes - everything is generated by AI based on content analysis.
"""

from typing import Dict, Any, List, Optional, Tuple
from models.requests import DeckOutline, SlideOutline
import json
import re
import logging


class GlobalThemeSystem:
    """Manages AI-driven global theme generation."""
    
    @staticmethod
    def analyze_deck_content(deck_outline: DeckOutline, available_fonts: Optional[Dict[str, List[str]]] = None) -> str:
        """Create a comprehensive content analysis prompt for AI."""
        
        # Gather all content
        title = deck_outline.title
        vibe = deck_outline.stylePreferences.vibeContext if deck_outline.stylePreferences else "professional"
        
        # OPTIMIZATION: Sample content instead of including everything
        sampled_content = []
        if deck_outline.slides:
            # Always include first slide (reduced content)
            sampled_content.append(f"Slide 1: {deck_outline.slides[0].title}\n{deck_outline.slides[0].content[:100]}")
            
            # Sample middle slides (reduced)
            if len(deck_outline.slides) > 2:
                middle_idx = len(deck_outline.slides) // 2
                sampled_content.append(f"Slide {middle_idx}: {deck_outline.slides[middle_idx-1].title}\n{deck_outline.slides[middle_idx-1].content[:50]}")
            
            # Always include last slide (reduced)
            if len(deck_outline.slides) > 1:
                sampled_content.append(f"Slide {len(deck_outline.slides)}: {deck_outline.slides[-1].title}\n{deck_outline.slides[-1].content[:100]}")
        
        all_content = "\n\n".join(sampled_content)
        
        # Format available fonts
        available_fonts_str = ""
        if available_fonts:
            for category, fonts in available_fonts.items():
                if fonts:  # Only show categories with fonts
                    # Show all fonts for important categories, limit others
                    if category in ["Script", "Bold", "Design", "Designer", "Unique"]:
                        available_fonts_str += f"\n   {category}: {', '.join(fonts)}"
                    else:
                        # Show first 10 fonts for other categories
                        display_fonts = fonts[:10]
                        if len(fonts) > 10:
                            available_fonts_str += f"\n   {category}: {', '.join(display_fonts)} (+ {len(fonts) - 10} more)"
                        else:
                            available_fonts_str += f"\n   {category}: {', '.join(display_fonts)}"
        else:
            available_fonts_str = "\n   [Font list not provided - use your best judgment]"
        
        return f"""
Analyze this presentation content and create a comprehensive design theme.

PRESENTATION TITLE: {title}
VIBE/CONTEXT: {vibe}
NUMBER OF SLIDES: {len(deck_outline.slides)}

FULL CONTENT:
{all_content}

ANALYSIS REQUIRED:
1. What is the primary subject matter? (e.g., character, brand, concept, industry)
2. What emotions should this evoke? (e.g., playful, serious, innovative, trustworthy)
3. Are there any obvious color associations? (e.g., Pikachu=yellow, ocean=blue, Christmas=red/green)
4. What is the target audience? (e.g., children, executives, students, general public)
5. What visual style would best serve this content? (e.g., minimal, bold, playful, corporate)

BRAND COLOR DETECTION:
- If this is about a known brand/character, use OFFICIAL colors:
  - Pikachu/Pok√©mon: #FFCB05 (Pikachu Yellow), #EE1515 (Pok√©mon Red), #0075BE (Pok√©mon Blue)
  - Coca-Cola: #F40009 (Coke Red), #FFFFFF (White)
  - Facebook/Meta: #1877F2 (Facebook Blue)
  - Google: #4285F4 (Blue), #DB4437 (Red), #F4B400 (Yellow), #0F9D58 (Green)
  - Mario/Nintendo: #E60012 (Mario Red), #049CD8 (Mario Blue), #43B047 (Luigi Green)
  - Disney: #003580 (Disney Blue), #113CCF (Magic Blue)
  - Apple: #555555 (Space Gray), #A8A8AA (Silver), #000000 (Black)
  - Microsoft: #00A4EF (Microsoft Blue), #7FBA00 (Xbox Green), #FFB900 (Office Orange)
- NEVER use washed-out, bland versions of brand colors
- For nature topics: use rich, saturated earth tones
- For tech brands: research and use their exact hex codes
- For business: use strong, confident colors (not muted)

CREATIVE COLOR FREEDOM - BE BOLD AND DARING:
- NEVER default to blue/black/white combo - that's BORING!
- Use UNEXPECTED color combinations that still harmonize
- Think like a MAGAZINE DESIGNER not a corporate template
- If it's about Pikachu: Electric yellows, shocking oranges, lightning blues
- If it's about the ocean: Deep teals, coral pinks, seafoam greens, sandy beiges
- If it's about space: Deep purples, hot pinks, electric blues, cosmic teals
- For kids' content: RAINBOW explosions, candy colors, neon everything
- For luxury: Deep burgundy, rose gold, midnight blue, champagne
- For tech: Cyberpunk neons, holographic gradients, matrix greens
- For nature: Forest greens, sunset oranges, river blues, earth browns
- BE FEARLESS! Use gradients everywhere! Mix warm and cool colors!

CREATIVE COLOR MASTERY - STUNNING PALETTES:
- Dynamic backgrounds with IMPACT:
  - Gradient meshes: Multiple color points for organic flow
  - Dark themes: Deep, rich colors (#0A0E27, #1A0033, #0D1117)
  - Vibrant backgrounds: Bold color fields when appropriate
  - Gradient backgrounds: DRAMATIC transitions (mesh, aurora, iridescent)
- Text colors with PERSONALITY:
  - Primary text: #0A0A0A or #F7F7F7 (never pure black/white)
  - Colored text: Use boldly for headers and emphasis
  - Text shadows: Subtle color glows for depth
  - Gradient text: For hero elements (use CSS gradient)
- Accent strategy for MEMORABILITY:
  - Use ALL 7 colors creatively across the slide
  - Create unexpected color pairings
  - Neon accents for tech/modern themes
  - Metallic tones for luxury/premium content
  - NEVER play it safe - be bold with color

 CRITICAL DESIGN PHILOSOPHY - READ THIS FIRST:
You are creating a STUNNING, MEMORABLE presentation that will WOW the audience.
Think like you're designing for:
- Apple Keynote (minimal but impactful)
- National Geographic (visual storytelling)
- Vogue Magazine (editorial layouts)  
- Nike Campaign (bold and dynamic)

AVOID AT ALL COSTS:
- Corporate PowerPoint templates
- Centered text on white backgrounds
- Equal-sized boxes in a grid
- Default blue/gray color schemes
- Small, timid design choices

Based on your analysis, create a COMPLETE DESIGN SYSTEM with:

1. THEME NAME: A creative name for this design system

2. COLOR PALETTE:
   - Primary Background: Hex color (MUST BE DARK/BOLD - #1A1A1A to #3A3A3A or rich saturated colors)
   - Secondary Background: Hex color (For gradient end - contrasting with primary)
   - Primary Text: Hex color (Usually #FFFFFF for dark backgrounds)
   - Secondary Text: Hex color (Usually #E0E0E0 for readability)
   - Accent 1: Hex color (main accent - VIBRANT and BOLD)
   - Accent 2: Hex color (secondary accent - equally VIBRANT)
   - Accent 3: Hex color (tertiary accent - for highlights)
   - Should we use Huemint: true/false (ALWAYS FALSE - we want bold custom colors)
   - Background Gradient: Define gradient direction and stops
   - Gradient Type: linear, radial, or mesh

3. TYPOGRAPHY:
   - Hero Title: Font family, size (pt), weight, letter-spacing
   - Section Title: Font family, size (pt), weight, letter-spacing
   - Body Text: Font family, size (pt), weight, line-height
   - Caption: Font family, size (pt), weight

   FONT SELECTION GUIDANCE:
   - üö® CRITICAL: NEVER USE INTER! It's boring and overused!
   - DO NOT default to Inter, Helvetica, or Arial! Be creative with font choices!
   - Inter is FORBIDDEN - choose literally any other font!
   - Choose from these ACTUALLY AVAILABLE fonts in the system:
   
   {available_fonts_str}
   
   - Match fonts to the content theme (BE CREATIVE - MIX CATEGORIES!):
     * Tech/Startup: Tech & Startup category (IBM Plex, Oxanium, Tomorrow) + Geometric (Questrial, Dosis)
     * Corporate/Business: Branding category (Prompt, Radio Canada) + Premium sans-serifs
     * Playful/Fun: Mix Script (Pacifico, Kaushan) + Retro (Bungee variants, Press Start 2P)
     * Elegant/Luxury: Luxury category (Tenor Sans, Cormorant variants) + Editorial (Bodoni Moda, Rozha One)
     * Editorial/Magazine: Editorial category + Mix Modern (Satoshi, Cabinet Grotesk) for contrast
     * Bold/Impact: Bold category (Bebas Neue, Anton) + Unique (Orbitron, Audiowide)
     * Fashion/Beauty: Luxury fonts + Elegant scripts (Allura, Great Vibes)
     * Retro/Vintage: Retro category (Monoton, Fascinate) + Design classics
     * Scientific/Academic: Serif (Noto Serif, Bitter) + Monospace for data (JetBrains Mono)
     * Creative/Artistic: Mix ALL categories creatively - be bold with combinations!
   
   SIZE REQUIREMENTS - PRECISE AND READABLE:
   - Slide-wide Impact (1-2 words): 250-300pt (massive visual impact)
   - Hero Title (3-10 chars): 80-120pt (prominent but readable)
   - Section Headers (short phrases): 70-90pt (clear hierarchy)
   - Body Text (sentences): 30-36pt (comfortable reading)
   - Supporting Content (paragraphs): 28-32pt (dense but readable)
   - Sources/Captions (references): 24-28pt (smallest readable size)
   
   CRITICAL TITLE FORMATTING:
   - Split titles into multiple lines for visual impact
   - Use DIFFERENT COLORS for different parts of titles
   - Consider DIFFERENT FONTS for emphasis words
   - Example: "The" (smaller, muted) "FUTURE" (huge, bright) "is Now" (medium, accent)
   - Use fontWeight variations: mix normal and bold
   - Add letter-spacing for dramatic effect on key words
   
   The canvas is 1920x1080 - GO BIG with text sizing!

4. VISUAL STYLE - STUNNING AND MEMORABLE:
   - Image Prominence: percentage (0-100%)
   - Image Effects: ken-burns (subtle zoom), parallax (depth), fade-in (smooth entrance), zoom (dramatic focus)
   - Image Filters: dramatic (high contrast), cyberpunk (neon tints), vintage (warm tones), vibrant (saturated)
   - Image Masks: circle (profiles), hexagon (tech), diagonal (energy), polaroid (casual)
   - Layout Patterns: full-bleed (hero), split-screen (50/50), asymmetric (2/3), layered (depth), collage (creative)
   - Background Style: ALWAYS GRADIENTS (100% - NEVER solid colors)
   - Gradient Types: mesh (organic flow), radial (spotlight effect), linear (directional), conic (circular sweep)
   - Gradient Complexity: Use 3-5 color stops minimum for rich, complex gradients
   - Background Effects: aura (glowing orbs), clouds (atmospheric), waves (flowing motion), mesh (organic gradients), northern-lights (vibrant streaks)
   - Shape Usage: LARGE circles for stats (300-500px), hexagons for process, arrows for flow
   - Creative Effects: transparency (30-50%), blur backgrounds, DRAMATIC gradient fills (30-50% color difference)
   - Background Complexity: Use 3-5 gradient stops, multiple overlapping gradients, or CustomComponents for animated effects

5. DESIGN RULES - BOLD & MEMORABLE:
   - Use Shapes: CREATIVE backgrounds, containers, visual interest
   - Shape Rules: Shapes can be decorative when they enhance visual appeal
   - Use Gradients: DRAMATIC (90% of slides, 30-50% color difference for impact)
   - Gradient Types: Mesh gradients, radial glows, multi-angle combinations
   - Animation Level: moderate (smooth transitions, subtle movements)
   - Overall Style: STUNNING, BOLD, MAGAZINE-QUALITY
   - Layout Philosophy: Dynamic asymmetry with visual tension
   - Component Usage: 8-12 components including creative backgrounds
   - Visual Effects: Glows, auras, gradient overlays, dramatic shadows
   - Chart Theme Mode: Match primary background for cohesion
   - Chart Configuration: ALWAYS showLegend: false for ALL chart types
   - Color Relationships: Bold contrasts and unexpected harmonies
   - Icon Usage: OPTIONAL and used sparingly ‚Äî only for text labels and data visualization; NEVER decorative; do NOT add icons to every text block
   - Emoji Prohibition: NEVER use emojis in any content - professional text only
   - Background Philosophy: ALWAYS BOLD - Dark or saturated backgrounds with DRAMATIC gradients (no exceptions)
   - Gradient Rules: EVERY slide MUST have gradient backgrounds - use primary to secondary background colors

OUTPUT FORMAT: Provide a JSON object with all the above specifications.

IMPORTANT: 
- If the content is about a specific character/brand/entity with known colors, use those colors!
- For abstract business content, suggest using Huemint for dynamic palettes
- Match the sophistication level to the audience and content
- Be creative but appropriate for the subject matter
- Consider whether charts should use light or dark theme based on the primary background color
"""
    
    @staticmethod
    def generate_slide_guidelines(theme_analysis: Dict[str, Any], slide_outline: SlideOutline, slide_index: int, total_slides: int) -> str:
        """Generate AI prompt for slide-specific guidelines."""
        
        is_first = slide_index == 0
        is_last = slide_index == total_slides - 1
        slide_content_preview = slide_outline.content[:200]
        
        # Detect content type for better guidance
        has_stats = any(char.isdigit() for char in slide_outline.content) or '%' in slide_outline.content
        has_bullets = any(marker in slide_outline.content for marker in ['‚Ä¢', '-', '*', '\n-', '\n‚Ä¢'])
        has_process = any(word in slide_outline.content.lower() for word in ['step', 'phase', 'stage', 'process'])
        has_comparison = any(word in slide_outline.content.lower() for word in ['vs', 'versus', 'compared', 'before', 'after'])
        
        return f"""
Transform this slide into a VISUAL MASTERPIECE using the global theme.

GLOBAL THEME: {json.dumps(theme_analysis, indent=2)}

SLIDE DETAILS:
- Position: Slide {slide_index + 1} of {total_slides}
- Title: {slide_outline.title}
- Content Preview: {slide_content_preview}...
- Is Title Slide: {is_first}
- Is Closing Slide: {is_last}
- Has Statistics: {has_stats}
- Has Bullet Points: {has_bullets}
- Has Process/Steps: {has_process}
- Has Comparison: {has_comparison}

 VISUAL TRANSFORMATION GUIDELINES:

{f'''
1. TITLE SLIDE TRANSFORMATION:
   - Create a CINEMATIC opening with massive typography (600-1000pt)
   - Use full-bleed hero image with gradient overlay
   - Position title dramatically (center, off-center, or diagonal). Left-aligned layouts are encouraged when the narrative benefits from strong reading direction.
   - Add subtle animation effects (ken-burns, fade-in)
   - Consider adding a powerful tagline or subtitle
   - Add a subtle metadata row (presenter ‚Ä¢ organization ‚Ä¢ date) in muted color, 24‚Äì48pt, bottom-left or bottom-right
   - Optional: small logo in a corner (80‚Äì160px) with clearspace; must not compete with the title
   - Use the most dramatic color from the palette
   - CRITICAL: Title must OVERLAP background imagery/gradient.
   - CRITICAL: Avoid 50/50 split on title slides; prefer full-bleed hero or left-aligned hero.
''' if is_first else ''}

{f'''
2. STATISTICS TRANSFORMATION:
   - Make numbers IMPOSSIBLY large (250-300pt)
   - Use accent colors for the numbers
   - Add context in smaller text (30-36pt for readability)
   - Consider using CustomComponents for animated counting
   - Position stats to create visual tension
   - Add subtle shapes behind for emphasis
   - Show comparisons with dramatic size differences
''' if has_stats else ''}

{f'''
3. BULLET POINTS ‚Üí VISUAL CARDS:
   - Transform each bullet into a designed card
   - Use different sizes based on importance
   - Add meaningful icons ONLY for text labels (no decorative icons)
   - Vary positioning (grid, staggered, circular)
   - Use color coding for categories
   - Consider progressive reveal animations
''' if has_bullets else ''}

{f'''
4. PROCESS/JOURNEY VISUALIZATION:
   - Create a visual timeline or path
   - Use ascending layouts for progress
   - Connect steps with lines or arrows
   - Size steps based on importance
   - Use color progression (light ‚Üí dark)
   - Consider circular or diagonal flows
''' if has_process else ''}

{f'''
5. COMPARISON DRAMA:
   - Use split-screen layouts
   - Create David vs Goliath sizing
   - Use contrasting colors (muted vs vibrant)
   - Position for maximum contrast
   - Consider before/after transformations
   - Add visual metaphors for the comparison
''' if has_comparison else ''}

{f'''
6. CONCLUSION SLIDE POWER:
   - Single powerful call-to-action
   - Massive typography for key takeaway
   - Loop back to opening visual theme
   - Contact info as design element
   - Leave them with one memorable visual
   - Use the full color palette dramatically
''' if is_last else ''}

7. INTELLIGENT BRAND ELEMENT PLACEMENT (FIXED FOOTER ZONE):
   - Footer Zone (applies to ALL slides unless explicitly stated):
     * Define a fixed footer zone at the SLIDE BOTTOM (not the content area)
     * Place a thin, SHORT divider line ABOVE the footer items (width ~200‚Äì400px, stroke 1‚Äì2px, opacity ~0.3), aligned to the right
     * Keep this consistent across all slides for a cohesive feel

   - Logo Placement (fixed):
     * Use a MICRO logo in the bottom-left of the footer zone (40‚Äì80px wide)
     * Object fit: contain; keep clearspace; never dominate the slide
     * Title slides may optionally use a larger logo elsewhere, but content slides keep the micro logo in the same bottom-left position

   - Source Citations (fixed):
     * Always render as a MICRO footnote in the bottom-right of the footer zone
     * Font size 12‚Äì14pt, muted gray; alignment: right; no extra separators
     * Format: "Sources: [1][2][3]"; use numeric indices matching inline [n] markers
     * Do NOT attach to or align with content blocks; it must be anchored to the SLIDE BOTTOM footer area
     * Never overlap with main content or logo; keep to one consolidated sources block per slide

   - Decorative Lines & Dividers:
     * Use sparingly to separate content sections
     * Thin accent lines (2‚Äì4px) aligned to content grid
     * Footer divider is SHORT by design (see Footer Zone), distinct from content dividers
     * Avoid on title slides unless part of hero design

8. CONTEXTUAL BRAND ELEMENT DECISIONS:
   - Content-heavy slides (text, bullets): Minimal brand elements
   - Visual slides (images, charts): More space for brand elements
   - Transition slides: Perfect for subtle brand reinforcement
   - Data slides: Let data shine, brand elements secondary

SPECIFIC LAYOUT PATTERNS FOR THIS SLIDE:
{GlobalThemeSystem._get_layout_pattern_for_content(slide_outline, has_stats, has_bullets, has_process, has_comparison, is_first, is_last)}

1. LAYOUT APPROACH:
   - How should this specific content be arranged?
   - What's the visual hierarchy?
   - How much space for images vs text?

2. COLOR APPLICATION:
   - Which colors from the palette to emphasize?
   - Any slide-specific color needs?

3. TYPOGRAPHY DECISIONS:
   - What size for this specific title?
   - How to handle the body text?
   - Any special text treatments?

4. IMAGE STRATEGY:
   - Should this slide have images?
   - What kind of images would work?
   - How to position them?

5. SPECIAL ELEMENTS:
   - Any shapes or dividers needed?
   - Data visualization approach?
   - Unique elements for this content?

Provide specific, actionable guidelines that maintain theme consistency while serving this slide's unique needs.
"""
    
    @staticmethod
    def create_smart_palette_prompt(deck_outline: DeckOutline, initial_analysis: Dict[str, Any]) -> str:
        """Create prompt for smart color palette generation."""
        
        return f"""
Create a smart color palette for this presentation.

CONTENT: {deck_outline.title}
INITIAL THEME ANALYSIS: {json.dumps(initial_analysis, indent=2)}

SMART COLOR SELECTION RULES:

1. CONTENT-BASED COLORS:
   - If the content is about something with obvious colors (e.g., Pikachu, ocean, fire), use those colors
   - If it's a brand presentation, use brand colors
   - If it's seasonal (Christmas, Halloween), use appropriate colors

2. EMOTIONAL COLORS:
   - Match colors to the emotional tone
   - Professional = blues, grays
   - Playful = bright, varied colors
   - Innovative = purples, teals
   - Natural = greens, browns

3. WHEN TO RECOMMEND HUEMINT:
   - DEFAULT: Always use Huemint for beautiful, harmonious palettes
   - EXCEPTION: Only set to false if:
     * This is about a specific brand with known colors (Coca-Cola, Google, etc.)
     * This is about a character with iconic colors (Pikachu, Mario, etc.)
     * The title explicitly mentions a brand/product name
   - For ALL other topics (business, education, personal, abstract): use_huemint: true
   - Huemint creates sophisticated, beautiful color combinations
   - Return: "use_huemint": true/false (DEFAULT TRUE)

4. PALETTE STRUCTURE:
   Return a JSON object with:
   {{
     "palette_name": "Descriptive name",
     "colors": ["{chr(35)}hex1", "{chr(35)}hex2", "{chr(35)}hex3", "{chr(35)}hex4"],
     "backgrounds": ["{chr(35)}bg1", "{chr(35)}bg2"],
     "text_colors": ["{chr(35)}text1", "{chr(35)}text2"],
     "reasoning": "Why these colors",
     "use_huemint": true/false,
     "confidence": 0.0-1.0
   }}

Be smart about color selection - obvious associations should be respected!
"""


def get_merged_theme_and_style_prompt(deck_outline: DeckOutline, available_fonts: Optional[Dict[str, List[str]]] = None) -> str:
    """Generate a merged prompt for both theme and style analysis in one call."""
    
    print(f"\n{'='*60}")
    print(f"[THEME PROMPT] Building merged theme and style prompt")
    print(f"[THEME PROMPT] Checking for style preferences...")
    print(f"{'='*60}\n")
    
    theme_system = GlobalThemeSystem()
    content_analysis_prompt = theme_system.analyze_deck_content(deck_outline, available_fonts)
    
    # OPTIMIZATION: Limit content sampling to reduce tokens
    # Instead of ALL content, sample intelligently
    all_content = []
    
    # Always include first and last slides
    if deck_outline.slides:
        # First slide (title/intro)
        first_slide = deck_outline.slides[0]
        all_content.append(f"Slide 1: {first_slide.title}\nContent: {first_slide.content[:100]}")  # Reduced from 300
        
        # Sample middle slides (max 2)  # Reduced from 3
        middle_slides = deck_outline.slides[1:-1] if len(deck_outline.slides) > 2 else []
        if len(middle_slides) > 0:
            # Just take one from middle
            mid_index = len(middle_slides) // 2
            slide = middle_slides[mid_index]
            all_content.append(f"Slide {mid_index+2}: {slide.title}\nContent: {slide.content[:50]}")  # Reduced from 200
        
        # Last slide (conclusion)
        if len(deck_outline.slides) > 1:
            last_slide = deck_outline.slides[-1]
            all_content.append(f"Slide {len(deck_outline.slides)}: {last_slide.title}\nContent: {last_slide.content[:100]}")  # Reduced from 300
    
    combined_content = "\n\n".join(all_content)
    
    # OPTIMIZATION: Just use slide titles for image searches (much smaller)
    slides_for_search = []
    # Just list slide titles, no content
    for i, slide in enumerate(deck_outline.slides[:5]):  # Max 5 slides
        slides_for_search.append(f"{i+1}. {slide.title}")
    slides_list = "\n".join(slides_for_search)
    
    # Extract brand guidelines and specific color preferences if available
    brand_guidelines_section = ""
    specific_colors_section = ""
    
    # Check for brand guidelines in files
    if hasattr(deck_outline, 'uploadedMedia') and deck_outline.uploadedMedia:
        for media in deck_outline.uploadedMedia:
            if hasattr(media, 'metadata') and media.metadata:
                if media.metadata.get('brandGuideline'):
                    brand_guidelines_section += f"\n\n BRAND GUIDELINE DETECTED: {media.filename}"
                    if media.metadata.get('extractedBrandInfo'):
                        brand_info = media.metadata['extractedBrandInfo']
                        brand_guidelines_section += f"\nBrand Colors: {brand_info.get('colors', [])}"
                        brand_guidelines_section += f"\nBrand Fonts: {brand_info.get('fonts', [])}"
                        brand_guidelines_section += f"\nBrand Style: {brand_info.get('style', '')}"
                        logger.info(f"[THEME PROMPT] Found brand guideline in uploaded media: {media.filename}")
                        logger.info(f"[THEME PROMPT] Brand colors from file: {brand_info.get('colors', [])}")
    
    # Check for specific color preferences
    if deck_outline.stylePreferences:
        color_pref = getattr(deck_outline.stylePreferences, 'colorPreference', None)
        if color_pref:
            if isinstance(color_pref, dict) and color_pref.get('specificColors'):
                specific_colors_section = "\n\n USER SPECIFIED COLORS:"
                for color_name, color_value in color_pref['specificColors'].items():
                    specific_colors_section += f"\n- {color_name}: {color_value}"
                specific_colors_section += "\n\n‚ö†Ô∏è CRITICAL: You MUST use these exact colors in your palette!"
                logger.info(f"[THEME PROMPT] User specified colors: {color_pref['specificColors']}")
            elif isinstance(color_pref, str) and color_pref.startswith('#'):
                # Single color preference
                specific_colors_section = f"\n\n USER SPECIFIED COLOR: {color_pref}"
                specific_colors_section += "\n‚ö†Ô∏è CRITICAL: Build your palette around this exact color!"
                logger.info(f"[THEME PROMPT] User specified single color: {color_pref}")
    
    # Check for color mentions in the prompt
    color_mentions = []
    color_keywords = ['color', 'colour', 'hex', '#']
    hex_pattern = r'#[0-9A-Fa-f]{6}\b'
    
    # Search in the prompt for hex colors
    import re
    hex_matches = re.findall(hex_pattern, deck_outline.title + ' ' + getattr(deck_outline, 'prompt', ''))
    if hex_matches:
        specific_colors_section += f"\n\n COLORS MENTIONED IN PROMPT:"
        for hex_color in hex_matches:
            specific_colors_section += f"\n- {hex_color}"
        specific_colors_section += "\n‚ö†Ô∏è CRITICAL: Include these exact colors in your palette!"
        logger.info(f"[THEME PROMPT] Colors found in prompt text: {hex_matches}")
    
    # Log token savings
    logger = logging.getLogger(__name__)
    total_content_chars = sum(len(s.title) + len(s.content) for s in deck_outline.slides)
    sampled_chars = len(combined_content)
    percent = (sampled_chars / total_content_chars * 100) if total_content_chars else 0.0
    logger.info(f"Theme generation optimization: Using {sampled_chars:,}/{total_content_chars:,} chars ({percent:.1f}% of content)")
    
    # Log color preference summary
    if brand_guidelines_section:
        print(f"\n{'='*60}")
        print(f"[COLOR DECISION]  BRAND GUIDELINES DETECTED - Will use brand colors")
        print(f"{'='*60}\n")
    elif specific_colors_section:
        print(f"\n{'='*60}")
        print(f"[COLOR DECISION]  SPECIFIC COLORS PROVIDED - Will use user colors")
        print(f"{'='*60}\n")
    else:
        print(f"\n{'='*60}")
        print(f"[COLOR DECISION]  NO SPECIFIC COLORS - Will use Huemint for palette")
        print(f"{'='*60}\n")
    
    return f"""
You are a VISIONARY DESIGN DIRECTOR creating a complete design system and visual strategy for a presentation.

{content_analysis_prompt}

{brand_guidelines_section}

{specific_colors_section}

 COLOR PREFERENCE PRIORITY:
1. HIGHEST PRIORITY: Brand guideline colors (if brand guideline uploaded)
2. HIGH PRIORITY: User-specified exact colors (if provided)
3. MEDIUM PRIORITY: Colors mentioned in prompt/content
4. LOW PRIORITY: AI-generated colors based on content

‚ö†Ô∏è CRITICAL RULES FOR COLOR SELECTION:
- If brand guidelines are provided, use ONLY the brand colors
- If user specifies exact colors, you MUST include them
- If user mentions colors in prompt, incorporate them
- Only use Huemint if NO specific colors are provided
- When specific colors exist, set "should_use_huemint": false

ADDITIONAL STYLE REQUIREMENTS:
Based on the deck content, also provide a detailed style specification that includes:

1. Design approach (MINIMALIST, BOLD, CREATIVE, PROFESSIONAL, PLAYFUL)
2. Specific color values and usage rules
3. Typography specifications with exact sizes and families
4. Component usage guidelines
5. Image treatment and effects
6. Spacing and layout rules

DECK CONTENT SAMPLE (Representative slides):
{combined_content}

Total slides in deck: {len(deck_outline.slides)}

IMAGE SEARCH STRATEGY:
 CRITICAL: Only generate searches for KEY VISUAL TOPICS across the ENTIRE DECK, not every slide!

SMART SEARCH APPROACH:
1. Identify 3-5 CORE VISUAL THEMES for the entire presentation
2. Extract 2-3 UNIQUE visual elements that appear multiple times
3. Add 1-2 mood/texture searches that fit the deck's vibe
4. TOTAL: Maximum 10 search terms for the ENTIRE deck

‚ö†Ô∏è SEARCH TERM RULES:
GOOD: EXCELLENT: Specific nouns (pikachu, ocean, laptop, forest)
GOOD: EXCELLENT: Concrete objects (lightning, mountain, building)
GOOD: EXCELLENT: Brand/character names (Nike, Pokemon, Apple)
GOOD: GOOD: Visual concepts (teamwork, innovation)
GOOD: OK: Scene descriptions (sunset beach, city skyline)

BAD: NEVER: Abstract words (why, how, what, when)
BAD: NEVER: Adjectives alone (amazing, great, cool)
BAD: NEVER: Single colors (blue, red, yellow)
BAD: NEVER: Generic terms (introduction, overview, agenda)
BAD: NEVER: Vague concepts (things, stuff, information)

PRIORITIZATION:
1. Main subject/character (if presentation is about Pikachu, search "pikachu")
2. Recurring visual themes (if multiple slides mention ocean, search "ocean")
3. Key visual metaphors (if growth is mentioned often, maybe search "plant growth")
4. Deck-wide mood (professional ‚Üí "office", playful ‚Üí "colorful patterns")

SAMPLED SLIDES FOR SEARCH CONTEXT:
{slides_list}

EXAMPLE OUTPUT (for a 20-slide Pikachu deck):
{{
  "core_themes": ["pikachu", "pokemon", "lightning"],
  "unique_elements": ["pokeball", "thunder"],
  "mood_textures": ["yellow patterns", "electric energy"],
  "selected_searches": ["pikachu", "pokemon", "lightning", "pokeball", "electric energy"]
}}

For a business deck:
{{
  "core_themes": ["teamwork", "growth chart", "innovation"],
  "unique_elements": ["handshake", "rocket"],
  "mood_textures": ["modern office", "abstract network"],
  "selected_searches": ["teamwork", "growth chart", "handshake", "modern office"]
}}

ANALYZE THE ENTIRE DECK AND EXTRACT ONLY THE MOST VISUAL, SEARCHABLE TERMS.
Maximum 10 searches total, but prefer 5-7 focused searches.

DECK CONTENT:
Title: {deck_outline.title}
Total Slides: {len(deck_outline.slides)}
First 3 slides: {slides_list[:600]}...

Return searches as an object with the analysis and final selected searches:
{{
  "deck_wide": {{
    "core_themes": ["main", "visual", "themes"],
    "unique_elements": ["specific", "visual", "elements"],
    "mood_textures": ["mood", "texture"],
    "selected_searches": ["final", "5-10", "search", "terms"]
  }}
}}

Return a JSON object with THREE sections:
1. "theme" - the complete theme system
2. "style_spec" - the detailed style specification
3. "image_searches" - a single deck-wide object with analysis and selected searches

Example structure:
{{
  "theme": {{
    "theme_name": "...",
    "color_palette": {{...}},
    "typography": {{...}},
    "visual_style": {{...}},
    "design_rules": {{...}}
  }},
  "style_spec": {{
    "design_approach": "...",
    "color_palette": {{...}},
    "typography": {{...}},
    "components": {{...}},
    "images": {{...}},
    "spacing": {{...}}
  }},
  "image_searches": {{
    "deck_wide": {{
      "core_themes": ["pikachu", "pokemon", "lightning"],
      "unique_elements": ["pokeball", "thunder"],
      "mood_textures": ["yellow patterns", "electric energy"],
      "selected_searches": ["pikachu", "pokemon", "lightning", "pokeball", "electric energy"]
    }}
  }}
}}

Remember:
- Let the CONTENT drive your design decisions
- Be bold and creative while appropriate
- Create a cohesive system that works across all slides
- Consider the emotional impact of your choices
- Make it memorable and impactful
- Generate concise, effective image search queries

VARIANT GROUPS AND COMPARISON LAYOUTS (CRITICAL):
- Variant series (e.g., NBA teams, products, countries):
  - Provide a variants block in style_spec with consistent card template rules:
    {{
      "variants": {{
        "card_template": {{
          "title_style": {{"font": "hero", "size_pt": 80}},
          "fields": ["Overview", "Key stats", "Strengths", "Weaknesses", "Notable"],
          "field_order": ["Overview", "Key stats", "Strengths", "Weaknesses", "Notable"],
          "icons": false,
          "background_variant": "striped" | "solid" | "tinted",
          "accent_cycle": ["accent_1", "accent_2", "accent_3"]
        }},
        "grid": {{"columns": 2, "gap_px": 32}},
        "divider_between_variants": true,
        "progress_transition_after_block": true
      }}
    }}
  - Enforce identical subheading labels and ordering across all variant cards
  - Use subtle accent cycling to differentiate items while preserving consistency
- Comparison sections (distinct from variant profiles):
  - Provide a comparisons block in style_spec with split-screen rules:
    {{
      "comparisons": {{
        "layout": "split_50_50" | "split_60_40",
        "side_label_style": {{"font": "section", "size_pt": 80}},
        "paired_list_style": {{"bullet_gap_px": 16, "pairs": true}},
        "matrix_option": {{"enabled": true, "cell_border_opacity": 0.2}},
        "takeaway_emphasis": {{"size_pt": 100, "accent": "accent_1"}}
      }}
    }}
  - Always end comparison sequences with a synthesis/decision slide pattern in style_spec

CRITICAL: Return ONLY a valid JSON object with no additional text before or after. 
Your response must start with {{ and end with }}
Do not include any explanations, just the JSON object containing all three sections.

‚ö†Ô∏è IMPORTANT JSON FORMATTING RULES:
1. Use snake_case for ALL keys (e.g., "color_palette" NOT "Color Palette")
2. Use lowercase with underscores for nested keys (e.g., "primary_background" NOT "Primary Background")
3. Keep the response concise - no extra fields or explanations
4. Ensure valid JSON syntax - all strings quoted, no trailing commas

Example of CORRECT key formatting:
{{
  "theme": {{
    "theme_name": "Example",
    "color_palette": {{
      "primary_background": "#FFFFFF",
      "accent_1": "#0066CC"
    }}
  }}
}}

NOT this:
{{
  "theme": {{
    "Theme Name": "Example",
    "Color Palette": {{
      "Primary Background": "#FFFFFF",
      "Accent 1": "#0066CC"
    }}
  }}
}}
"""


def get_enhanced_slide_prompt(
    slide_outline: SlideOutline,
    global_theme: Dict[str, Any],
    available_images: List[Dict[str, Any]],
    slide_guidelines: str,
    async_images: bool = False
) -> str:
    """Generate enhanced slide prompt with AI-driven design decisions."""
    
    # Component guidelines are now in slide_generation_prompts.py
    component_guidelines = """
[Component guidelines are in slide_generation_prompts.py]

 COMPONENT USAGE GUIDELINES:
- Use TiptapTextBlock for standard text content
- Use Shape components for visual elements and backgrounds
- Use Chart for data visualization
- Use Table for comparisons and structured data
- Use CustomComponent for:
  * Creative text displays and animations
  * Animated counters and statistics
  * Special visual effects
  * Unique branded elements
  * Any creative display that enhances engagement
- Always include at least one CustomComponent per slide for visual interest!
"""
    
    # Determine image guidance based on mode
    if async_images and not available_images:
        # In async mode without images yet, tell AI to create placeholder Image components
        image_guidance = """
IMAGES ARE BEING LOADED:
Images are being searched in the background. Create Image components with placeholder sources.
Based on the theme's image prominence ({image_prominence}%), include appropriate Image components.
Use "placeholder" as the src value - these will be replaced when images arrive.

EXAMPLE PLACEHOLDER IMAGE:
{{
  "type": "Image",
  "props": {{
    "src": "placeholder",
    "position": {{"x": 0, "y": 0}},
    "width": 960,
    "height": 1080,
    "objectFit": "cover",
    "alt": "Image related to {slide_title}"
  }}
}}
""".format(
            image_prominence=global_theme.get('visual_style', {}).get('image_prominence', 70),
            slide_title=slide_outline.title
        )
    elif available_images:
        # Images are available, use them
        image_guidance = f"""
AVAILABLE IMAGES ({len(available_images)}):
{json.dumps([{{"url": img.get("url"), "alt": img.get("alt")}} for img in available_images[:3]], indent=2)}

Use these images creatively with the theme's recommended effects and layouts.
"""
    else:
        # No images and not async mode
        image_guidance = "No images available - use creative typography and layout"
    
    return f"""
CREATE A STUNNING SLIDE using the AI-generated theme system.

SLIDE CONTENT TO CREATE:
Title: {slide_outline.title}
Content: {slide_outline.content}

CRITICAL: Use the ACTUAL slide title and content above!

THEME SYSTEM (AI-Generated):
{json.dumps(global_theme, indent=2)}

SLIDE-SPECIFIC GUIDELINES:
{slide_guidelines}

{component_guidelines}

{image_guidance}

DESIGN APPROACH:
1. Start with the background color from the theme
2. Apply the typography system with proper sizing
3. {"Include Image components based on theme's image prominence" if async_images else "Use images creatively if available"}
4. Add minimal accent elements only if needed
5. SIZE COMPONENTS PROPERLY FOR CONTENT:
   - Calculate text box dimensions based on content length
   - Short content (1-3 words): 300-600px wide, 80-120px tall
   - Long content (50+ words): 800-1200px wide, 400-600px tall
   - Add height for multi-line text and bullet points
   - Ensure no text overflow or cutoff
6. PREVENT COMPONENT OVERLAPS:
   - Maintain 40px gaps between text components
   - Keep 60px clearance around charts and images
   - Verify bounds before finalizing positions
   - Stack vertically when horizontal space is limited

CREATIVE FREEDOM:
- The theme gives you the palette and rules
- You decide how to apply them creatively
- Make each slide unique while maintaining consistency
- Focus on making the content shine

Remember: Every design choice should serve the content and enhance the message.
"""


def get_smart_color_detection_prompt(deck_outline: DeckOutline) -> str:
    """Generate prompt for AI to detect if content has obvious color associations."""
    
    title = deck_outline.title
    content_preview = deck_outline.slides[0].content[:200] if deck_outline.slides else ""
    
    return f"""
Analyze this presentation title and content for obvious color associations.

TITLE: {title}
CONTENT PREVIEW: {content_preview}

QUESTIONS TO ANSWER:
1. Is this about something with obvious colors? (e.g., Pikachu=yellow, ocean=blue)
2. Is this about a known brand with specific colors?
3. Is this seasonal or holiday-related?
4. Are there color words in the title/content?
5. What colors would people expect for this topic?

RETURN FORMAT:
{{
  "has_obvious_colors": true/false,
  "detected_entity": "what was detected",
  "suggested_colors": ["{chr(35)}hex1", "{chr(35)}hex2", "{chr(35)}hex3"],
  "confidence": 0.0-1.0,
  "reasoning": "explanation"
}}

Be smart - if it's about Pikachu, suggest yellows. If it's about the ocean, suggest blues.
But if it's about "Q4 Financial Strategy", there's no obvious color association.
""" 